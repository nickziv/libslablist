#!/usr/bin/ksh

# make's complete lack of conditionals (aside from conditional macros) makes it
# a massive pain to work with. Couple that with lack of loops and it's outright
# torturous. I'm all for using the right tool for the job, and make is not it.
# Ksh, on the other hand, is a better tool for the job. Though, not the ideal
# tool.

# Maybe there is an elegant way to do this in `make`, but at any rate I don't
# know it. At least this script is runnable via ksh, which is the same on every
# platform. `make` syntax varies from OS to OS. For example, conditional macro
# syntax is different between Illumos make and GNU make. So even if there is a
# more elegant way to build this via `make`, it is probably going to be less
# portable.

#Yeah, this violates the CAPS convention, but is easier to read.
#cmplr=cc
#c_flags="-m64 -Kpic"
#ld_flags="-G -z text -z defs"
cmplr=gcc
c_flags="-m64 -fPIC -W -Wall"
umem_c_flags=$c_flags" -Wno-unused-parameter"
ld_flags="-shared"

libs="-ldtrace -lumem -lc"

if [[ $1 == "illumos" ]]; then
	libs="-ldtrace -lumem -lc"
fi

if [[ $1 == "unix" ]]; then
	libs="-ldtrace -lc"
fi


src_dir="../src"
output="libslablist.so.1"

csrc_file[0]=../src/slablist_add.c
csrc_file[1]=../src/slablist_rem.c
csrc_file[2]=../src/slablist_find.c

cobj_file[0]=slablist_add.o
cobj_file[1]=slablist_rem.o
cobj_file[2]=slablist_find.o

if [[ $1 == "illumos" ]]; then
	csrc_file[3]=../src/slablist_umem.c
	cobj_file[3]=slablist_umem.o
else
	csrc_file[3]=../src/slablist_malloc.c
	cobj_file[3]=slablist_malloc.o
fi

csrc_file[4]=../src/slablist_cons.c
csrc_file[5]=../src/slablist_test.c

cobj_file[4]=slablist_cons.o
cobj_file[5]=slablist_test.o
cobj_file[6]=slablist_provider.o

dsrc_file[0]="../src/slablist_provider.d"
dhdr_file[0]=../src/slablist_provider.h
dhdr_file_cwd[0]=slablist_provider.h

#Here we generate the header for the probes and transplant them
for i in 0
do
	dtrace -h -s ${dsrc_file[$i]}
	mv ${dhdr_file_cwd[$i]} ${dhdr_file[$i]}
done

#Here we compile all the files
for i in 0 1 2 3 4 5
do
	if [[ $i == "3" ]]; then
		$cmplr -c $umem_c_flags ${csrc_file[$i]}
	else 
		$cmplr -c $c_flags ${csrc_file[$i]}
	fi
done

#Here we concat all the obj-file names for the cli...
obj_line=""
for i in 0 1 2 3 4 5
do
	obj_line=$obj_line${cobj_file[$i]}" "
done


#Here we bake-in the probes
dsrc_line=" "
for i in 0
do
	dsrc_line=$dsrc_line"-s "${dsrc_file[$i]}" "
done

dtrace -G -64 $dsrc_line $obj_line

for i in 6
do
	obj_line=$obj_line${cobj_file[$i]}" "
done


#Here we generate the shared object
echo "$obj_line"
echo "$libs"
$cmplr $c_flags $ld_flags -o $output $obj_line $libs
